apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

// def enableProguardInReleaseBuilds = false
def enableProguardInReleaseBuilds = true

def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.yokohama.warrantyapp"
    defaultConfig {
        applicationId "com.yokohama.warrantyapp"
        // minSdkVersion rootProject.ext.minSdkVersion
        minSdkVersion 23
        // targetSdkVersion rootProject.ext.targetSdkVersion
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        if (project.hasProperty("react")) {
            project.ext.react = [
                enableHermes: false,
                flipperEnabled: false  // Disable Flipper if not needed
            ]
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty('WARRANTYAPP_STORE_FILE')) {
                storeFile file(WARRANTYAPP_STORE_FILE)
                storePassword WARRANTYAPP_STORE_PASSWORD
                keyAlias WARRANTYAPP_KEY_ALIAS
                keyPassword WARRANTYAPP_KEY_PASSWORD
                v2SigningEnabled true
                enableV2Signing true
                enableV3Signing true
                enableV4Signing true
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
             lintOptions {
            checkReleaseBuilds false  // Disables lint on debug builds
        }
        }
        release {
            signingConfig signingConfigs.release
            // minifyEnabled true
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
    }
    lintOptions {
        abortOnError false  // Disable abort on error
        checkReleaseBuilds false  // Disable lint for release builds
        // You can also suppress specific checks here
    }
    tasks.whenTaskAdded { task ->
        // Ensure that `copyReactNativeVectorIconFonts` runs before `lintAnalyzeDebug`
        if (task.name == 'lintAnalyzeDebug') {
            task.dependsOn ':app:copyReactNativeVectorIconFonts'
        }
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
}

// dependencies {
//     implementation("com.facebook.react:react-android")
//     implementation("com.facebook.react:flipper-integration:0.92.0")  // Change Flipper version
//     implementation project(':react-native-fs')
//     implementation "com.facebook.react:react-native:+"
//     implementation project(':react-native-vector-icons')
//     implementation platform('com.google.firebase:firebase-bom:31.0.0')
//     implementation("com.google.firebase:firebase-crashlytics")
//     implementation("com.google.firebase:firebase-analytics")
//     if (hermesEnabled.toBoolean()) {
//         implementation("com.facebook.react:hermes-android")
//     } else {
//         implementation jscFlavor
//     }
//     implementation project(':react-native-html-to-pdf')
// }
dependencies {
    // React Native and Flipper dependencies (updated to use AndroidX and Hermes if needed)
    implementation("com.facebook.react:react-android")  // Ensure React Native is using the correct version
    implementation("com.facebook.react:flipper-integration:0.92.0")  // Updated Flipper version
    
    // Local project dependencies
    implementation project(':react-native-fs')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-html-to-pdf')

    // Firebase dependencies with Firebase BOM to handle versioning automatically
    implementation platform('com.google.firebase:firebase-bom:31.0.0')
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")

    // Hermes (if enabled, otherwise fallback to JSC)
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Additional dependencies (to ensure compatibility with AndroidX)
    // Replace any old Android Support libraries with their AndroidX equivalents
    // For example: support-compat -> androidx.core:core
    
    // Example:
    // implementation 'com.android.support:support-compat:27.1.1' 
    // should be replaced with:
    implementation 'androidx.core:core:1.12.0'   // Use the AndroidX core library
    
    // Add any other AndroidX dependencies as needed, like AppCompat or Material Design
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'  // Lifecycle components if used
}

// Apply the necessary Gradle files for vector icons and native modules
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
